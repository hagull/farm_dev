# Generated by Django 2.0.7 on 2018-09-08 10:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AllHouseCctv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cctv_url', models.CharField(blank=True, max_length=1000)),
                ('cctv_ip', models.CharField(blank=True, max_length=1000)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Anode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_num', models.IntegerField(blank=True)),
                ('sw_ver', models.IntegerField(blank=True)),
                ('register_num', models.IntegerField(blank=True)),
                ('register_date', models.DateTimeField(blank=True)),
                ('node_state', models.CharField(blank=True, choices=[('n', 'Normal'), ('s', 'Sensor_Error'), ('b', 'Battery_Error'), ('v', 'Voltage_Error'), ('c', 'Communication_Error'), ('u', 'Unknown_Error')], max_length=1)),
                ('operating_mode', models.CharField(blank=True, choices=[('p', 'Passive'), ('e', 'Emergency')], max_length=1)),
                ('comm_error_num', models.IntegerField(blank=True)),
                ('service_error_num', models.IntegerField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnodeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='AnodeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anode_type', models.CharField(choices=[('oc', 'Open_Close_Motor'), ('ef', 'Extractor_Fan'), ('wm', 'Watering_Motor'), ('ns', 'Nutrient_Supply'), ('lc', 'Light_Control'), ('cc', 'Co2_Control'), ('dh', 'Dehumidifier'), ('hf', 'Humidifier'), ('ve', 'Valve_Equipment')], max_length=2)),
                ('anode_value', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('anode', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='palm.Anode')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('aaa', '오이'), ('aab', '딸기')], default=None, max_length=3)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Gcg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_num', models.IntegerField(blank=True)),
                ('node_num', models.IntegerField(blank=True)),
                ('node_group', models.IntegerField(blank=True)),
                ('sensing_periode', models.DateTimeField(blank=True)),
                ('gcg_state', models.CharField(blank=True, choices=[('n', 'Normal'), ('b', 'Battery_Error'), ('v', 'Voltage_Error'), ('c', 'Communication_Error'), ('u', 'Unknown Error')], max_length=1)),
                ('comm_error_num', models.IntegerField(blank=True)),
                ('service_error_num', models.IntegerField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GcgCctv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cctv_type', models.CharField(choices=[('i', 'inside'), ('o', 'outside')], max_length=1)),
                ('cctv_url', models.CharField(blank=True, max_length=1000)),
                ('cctv_ip', models.CharField(blank=True, max_length=1000)),
                ('gcg', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='palm.Gcg')),
            ],
        ),
        migrations.CreateModel(
            name='GcgLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to='palm.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Snode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_num', models.IntegerField(blank=True)),
                ('sw_ver', models.IntegerField(blank=True)),
                ('register_num', models.IntegerField(blank=True)),
                ('register_date', models.DateTimeField(blank=True)),
                ('node_state', models.CharField(blank=True, choices=[('n', 'Normal'), ('s', 'Sensor_Error'), ('b', 'Battery_Error'), ('v', 'Voltage_Error'), ('c', 'Communication_Error'), ('u', 'Unknown_Error')], max_length=1)),
                ('monitor_mode', models.CharField(blank=True, choices=[('p', 'Passive'), ('e', 'Emergency')], max_length=1)),
                ('comm_error_num', models.IntegerField(blank=True)),
                ('service_error_num', models.IntegerField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gcg', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='palm.Gcg')),
            ],
        ),
        migrations.CreateModel(
            name='SnodeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SnodeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snode_type', models.CharField(choices=[('t', 'Temperature'), ('h', 'Humidity'), ('th', 'Temperature_Humidity'), ('l', 'Light'), ('ws', 'Wind_Speed'), ('wd', 'Wind_Direction'), ('rf', 'Rain_Fall'), ('st', 'Soil_Temperature'), ('sh', 'Soil_Humidity'), ('ph', 'pH'), ('ec', 'EC')], max_length=2)),
                ('snode_value', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('snode', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='palm.Snode')),
            ],
        ),
        migrations.AddField(
            model_name='anode',
            name='gcg',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='palm.Gcg'),
        ),
    ]
